generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int              @id @default(autoincrement())
  name      String
  email     String           @unique
  password  String
  role      String           @default("customer")
  createdAt DateTime         @default(now())
  vehicles  Vehicle[]
  bookings  BookingService[]
  payments  Payment[]
  reviews   Review[]
  adminLogs AdminLog[]
}

model Service {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String
  price       Float
  category    ServiceCategory  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  bookings    BookingService[]
  reviews     Review[]         @relation("ServiceReview")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ServiceCategory {
  id          Int              @id @default(autoincrement())
  name        String
  description String
  services    Service[]
  createdAt   DateTime         @default(now())
  bookings    BookingService[]
}

model BookingService {
  id          Int             @id @default(autoincrement())
  userId      Int
  serviceId   Int
  categoryId  Int
  description String?
  bookedDate  DateTime
  status      String          @default("Pending")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt()
  user        User            @relation(fields: [userId], references: [id])
  service     Service         @relation(fields: [serviceId], references: [id])
  category    ServiceCategory @relation(fields: [categoryId], references: [id])
  Payment     Payment[]
}

model Payment {
  id               Int                  @id @default(autoincrement())
  userId           Int
  bookingServiceId Int
  amount           Float
  paymentMethod    String               @default("MPESA") // Default to M-Pesa
  paymentStatus    String               @default("pending") // pending, completed, failed
  paymentDate      DateTime
  createdAt        DateTime             @default(now())
  
  // M-Pesa Specific Fields
  rejectionReason  String?
  transactionId    String?               // M-Pesa Transaction ID (NULL if not completed)
  merchantRequestId String?             // Merchant Request ID for tracking
  mpesaReceipt     String?               // M-Pesa receipt number
  user             User                 @relation(fields: [userId], references: [id])
  bookingService   BookingService       @relation(fields: [bookingServiceId], references: [id])
  transactions     PaymentTransaction[]
}


model Vehicle {
  id           Int      @id @default(autoincrement())
  licensePlate String   @unique
  userId       Int
  make         String
  model        String
  year         Int?
  createdAt    DateTime @default(now())
  owner        User     @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  serviceId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  service   Service  @relation("ServiceReview", fields: [serviceId], references: [id])
}

model PaymentTransaction {
  id            Int      @id @default(autoincrement())
  paymentId     Int
  transactionId String
  paymentStatus String
  createdAt     DateTime @default(now())
  payment       Payment  @relation(fields: [paymentId], references: [id])

  @@map("payment_transactions")
}

model AdminLog {
  id          Int      @id @default(autoincrement())
  adminId     Int
  action      String
  description String
  createdAt   DateTime @default(now())
  admin       User     @relation(fields: [adminId], references: [id])
}
